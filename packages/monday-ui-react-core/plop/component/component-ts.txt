import React, { forwardRef, useRef } from "react";
import cx from "classnames";
import useMergeRef from "../../hooks/useMergeRef";
import VibeComponentProps from "../../types/VibeComponentProps";
import VibeComponent from "../../types/VibeComponent";
import { getTestId } from "../../tests/test-ids-utils";
import { ComponentDefaultTestId } from "../../tests/constants";
import styles from "./{{properCase componentName}}.module.scss";

export interface {{properCase componentName}}Props extends VibeComponentProps {
  /**
   * some custom prop
   */
  customProp?: string;
}

const {{properCase componentName}}: VibeComponent<{{properCase componentName}}Props, HTMLElement> = forwardRef(
  ({ className, id, "data-testid": dataTestId, customProp = "defaultValue" }, ref) => {
    const componentRef = useRef(null);
    const mergedRef = useMergeRef(ref, componentRef);

    return (
      <div
        ref={mergedRef}
        className={cx(styles.{{camelCase componentName}}, className)}
        id={id}
        data-testid={dataTestId || getTestId(ComponentDefaultTestId.{{constantCase componentName}}, id)}
      >
        My awesome component with customProp = {customProp}
      </div>
    );
  }
);

export default {{properCase componentName}};
